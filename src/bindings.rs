/* automatically generated by rust-bindgen 0.64.0 */

pub const __WORDSIZE: u32 = 64;
pub const __DARWIN_ONLY_64_BIT_INO_T: u32 = 1;
pub const __DARWIN_ONLY_UNIX_CONFORMANCE: u32 = 1;
pub const __DARWIN_ONLY_VERS_1050: u32 = 1;
pub const __DARWIN_UNIX03: u32 = 1;
pub const __DARWIN_64_BIT_INO_T: u32 = 1;
pub const __DARWIN_VERS_1050: u32 = 1;
pub const __DARWIN_NON_CANCELABLE: u32 = 0;
pub const __DARWIN_SUF_EXTSN: &[u8; 14usize] = b"$DARWIN_EXTSN\0";
pub const __DARWIN_C_ANSI: u32 = 4096;
pub const __DARWIN_C_FULL: u32 = 900000;
pub const __DARWIN_C_LEVEL: u32 = 900000;
pub const __STDC_WANT_LIB_EXT1__: u32 = 1;
pub const __DARWIN_NO_LONG_LONG: u32 = 0;
pub const _DARWIN_FEATURE_64_BIT_INODE: u32 = 1;
pub const _DARWIN_FEATURE_ONLY_64_BIT_INODE: u32 = 1;
pub const _DARWIN_FEATURE_ONLY_VERS_1050: u32 = 1;
pub const _DARWIN_FEATURE_ONLY_UNIX_CONFORMANCE: u32 = 1;
pub const _DARWIN_FEATURE_UNIX_CONFORMANCE: u32 = 3;
pub const __has_ptrcheck: u32 = 0;
pub const __PTHREAD_SIZE__: u32 = 8176;
pub const __PTHREAD_ATTR_SIZE__: u32 = 56;
pub const __PTHREAD_MUTEXATTR_SIZE__: u32 = 8;
pub const __PTHREAD_MUTEX_SIZE__: u32 = 56;
pub const __PTHREAD_CONDATTR_SIZE__: u32 = 8;
pub const __PTHREAD_COND_SIZE__: u32 = 40;
pub const __PTHREAD_ONCE_SIZE__: u32 = 8;
pub const __PTHREAD_RWLOCK_SIZE__: u32 = 192;
pub const __PTHREAD_RWLOCKATTR_SIZE__: u32 = 16;
pub const INT8_MAX: u32 = 127;
pub const INT16_MAX: u32 = 32767;
pub const INT32_MAX: u32 = 2147483647;
pub const INT64_MAX: u64 = 9223372036854775807;
pub const INT8_MIN: i32 = -128;
pub const INT16_MIN: i32 = -32768;
pub const INT32_MIN: i32 = -2147483648;
pub const INT64_MIN: i64 = -9223372036854775808;
pub const UINT8_MAX: u32 = 255;
pub const UINT16_MAX: u32 = 65535;
pub const UINT32_MAX: u32 = 4294967295;
pub const UINT64_MAX: i32 = -1;
pub const INT_LEAST8_MIN: i32 = -128;
pub const INT_LEAST16_MIN: i32 = -32768;
pub const INT_LEAST32_MIN: i32 = -2147483648;
pub const INT_LEAST64_MIN: i64 = -9223372036854775808;
pub const INT_LEAST8_MAX: u32 = 127;
pub const INT_LEAST16_MAX: u32 = 32767;
pub const INT_LEAST32_MAX: u32 = 2147483647;
pub const INT_LEAST64_MAX: u64 = 9223372036854775807;
pub const UINT_LEAST8_MAX: u32 = 255;
pub const UINT_LEAST16_MAX: u32 = 65535;
pub const UINT_LEAST32_MAX: u32 = 4294967295;
pub const UINT_LEAST64_MAX: i32 = -1;
pub const INT_FAST8_MIN: i32 = -128;
pub const INT_FAST16_MIN: i32 = -32768;
pub const INT_FAST32_MIN: i32 = -2147483648;
pub const INT_FAST64_MIN: i64 = -9223372036854775808;
pub const INT_FAST8_MAX: u32 = 127;
pub const INT_FAST16_MAX: u32 = 32767;
pub const INT_FAST32_MAX: u32 = 2147483647;
pub const INT_FAST64_MAX: u64 = 9223372036854775807;
pub const UINT_FAST8_MAX: u32 = 255;
pub const UINT_FAST16_MAX: u32 = 65535;
pub const UINT_FAST32_MAX: u32 = 4294967295;
pub const UINT_FAST64_MAX: i32 = -1;
pub const INTPTR_MAX: u64 = 9223372036854775807;
pub const INTPTR_MIN: i64 = -9223372036854775808;
pub const UINTPTR_MAX: i32 = -1;
pub const SIZE_MAX: i32 = -1;
pub const RSIZE_MAX: i32 = -1;
pub const WINT_MIN: i32 = -2147483648;
pub const WINT_MAX: u32 = 2147483647;
pub const SIG_ATOMIC_MIN: i32 = -2147483648;
pub const SIG_ATOMIC_MAX: u32 = 2147483647;
pub const true_: u32 = 1;
pub const false_: u32 = 0;
pub const __bool_true_false_are_defined: u32 = 1;
pub const IOWA_VERSION: &[u8; 10usize] = b"2022-05.3\0";
pub const IOWA_LWM2M_ID_ALL: u32 = 65535;
pub const IOWA_DM_UNDEFINED: u32 = 0;
pub const IOWA_DM_READ: u32 = 1;
pub const IOWA_DM_FREE: u32 = 2;
pub const IOWA_DM_WRITE: u32 = 3;
pub const IOWA_DM_EXECUTE: u32 = 4;
pub const IOWA_DM_CREATE: u32 = 5;
pub const IOWA_DM_DELETE: u32 = 6;
pub const IOWA_DM_DISCOVER: u32 = 7;
pub const IOWA_DM_WRITE_ATTRIBUTES: u32 = 8;
pub const IOWA_DM_NOTIFY: u32 = 9;
pub const IOWA_DM_CANCEL: u32 = 10;
pub const IOWA_DM_DATA_PUSH: u32 = 11;
pub const IOWA_DM_READ_REQUEST: u32 = 12;
pub const IOWA_BOOTSTRAP_UNDEFINED: u32 = 0;
pub const IOWA_BOOTSTRAP_READ: u32 = 101;
pub const IOWA_BOOTSTRAP_WRITE: u32 = 102;
pub const IOWA_BOOTSTRAP_DELETE: u32 = 103;
pub const IOWA_BOOTSTRAP_DISCOVER: u32 = 104;
pub const IOWA_BOOTSTRAP_FINISH: u32 = 105;
pub const IOWA_BOOTSTRAP_ADD_SERVER: u32 = 106;
pub const IOWA_BOOTSTRAP_REMOVE_SERVER: u32 = 107;
pub const IOWA_BOOTSTRAP_ADD_BOOTSTRAP_SERVER: u32 = 108;
pub const IOWA_BOOTSTRAP_REMOVE_BOOTSTRAP_SERVER: u32 = 109;
pub const IOWA_LWM2M_TYPE_UNDEFINED: u32 = 0;
pub const IOWA_LWM2M_TYPE_STRING: u32 = 1;
pub const IOWA_LWM2M_TYPE_OPAQUE: u32 = 2;
pub const IOWA_LWM2M_TYPE_INTEGER: u32 = 3;
pub const IOWA_LWM2M_TYPE_FLOAT: u32 = 4;
pub const IOWA_LWM2M_TYPE_BOOLEAN: u32 = 5;
pub const IOWA_LWM2M_TYPE_CORE_LINK: u32 = 6;
pub const IOWA_LWM2M_TYPE_OBJECT_LINK: u32 = 7;
pub const IOWA_LWM2M_TYPE_TIME: u32 = 8;
pub const IOWA_LWM2M_TYPE_UNSIGNED_INTEGER: u32 = 9;
pub const IOWA_LWM2M_TYPE_STRING_BLOCK: u32 = 101;
pub const IOWA_LWM2M_TYPE_OPAQUE_BLOCK: u32 = 102;
pub const IOWA_LWM2M_TYPE_CORE_LINK_BLOCK: u32 = 106;
pub const IOWA_COAP_NO_ERROR: u32 = 0;
pub const IOWA_COAP_201_CREATED: u32 = 65;
pub const IOWA_COAP_202_DELETED: u32 = 66;
pub const IOWA_COAP_203_VALID: u32 = 67;
pub const IOWA_COAP_204_CHANGED: u32 = 68;
pub const IOWA_COAP_205_CONTENT: u32 = 69;
pub const IOWA_COAP_231_CONTINUE: u32 = 95;
pub const IOWA_COAP_400_BAD_REQUEST: u32 = 128;
pub const IOWA_COAP_401_UNAUTHORIZED: u32 = 129;
pub const IOWA_COAP_402_BAD_OPTION: u32 = 130;
pub const IOWA_COAP_403_FORBIDDEN: u32 = 131;
pub const IOWA_COAP_404_NOT_FOUND: u32 = 132;
pub const IOWA_COAP_405_METHOD_NOT_ALLOWED: u32 = 133;
pub const IOWA_COAP_406_NOT_ACCEPTABLE: u32 = 134;
pub const IOWA_COAP_408_REQUEST_ENTITY_INCOMPLETE: u32 = 136;
pub const IOWA_COAP_409_CONFLICT: u32 = 137;
pub const IOWA_COAP_412_PRECONDITION_FAILED: u32 = 140;
pub const IOWA_COAP_413_REQUEST_ENTITY_TOO_LARGE: u32 = 141;
pub const IOWA_COAP_415_UNSUPPORTED_CONTENT_FORMAT: u32 = 143;
pub const IOWA_COAP_422_UNPROCESSABLE_ENTITY: u32 = 150;
pub const IOWA_COAP_429_TOO_MANY_REQUESTS: u32 = 157;
pub const IOWA_COAP_500_INTERNAL_SERVER_ERROR: u32 = 160;
pub const IOWA_COAP_501_NOT_IMPLEMENTED: u32 = 161;
pub const IOWA_COAP_502_BAD_GATEWAY: u32 = 162;
pub const IOWA_COAP_503_SERVICE_UNAVAILABLE: u32 = 163;
pub const IOWA_COAP_504_GATEWAY_TIMEOUT: u32 = 164;
pub const IOWA_COAP_505_PROXYING_NOT_SUPPORTED: u32 = 165;
pub const IOWA_CONTENT_FORMAT_TEXT: u32 = 0;
pub const IOWA_CONTENT_FORMAT_CORE_LINK: u32 = 40;
pub const IOWA_CONTENT_FORMAT_OPAQUE: u32 = 42;
pub const IOWA_CONTENT_FORMAT_CBOR: u32 = 60;
pub const IOWA_CONTENT_FORMAT_SENML_JSON: u32 = 110;
pub const IOWA_CONTENT_FORMAT_SENML_CBOR: u32 = 112;
pub const IOWA_CONTENT_FORMAT_TLV_OLD: u32 = 1542;
pub const IOWA_CONTENT_FORMAT_JSON_OLD: u32 = 1543;
pub const IOWA_CONTENT_FORMAT_TLV: u32 = 11542;
pub const IOWA_CONTENT_FORMAT_JSON: u32 = 11543;
pub const IOWA_CONTENT_FORMAT_LWM2M_CBOR: u32 = 11544;
pub const IOWA_CONTENT_FORMAT_UNSET: u32 = 65535;
pub const IOWA_DATA_BLOCK_SIZE_16: u32 = 16;
pub const IOWA_DATA_BLOCK_SIZE_32: u32 = 32;
pub const IOWA_DATA_BLOCK_SIZE_64: u32 = 64;
pub const IOWA_DATA_BLOCK_SIZE_128: u32 = 128;
pub const IOWA_DATA_BLOCK_SIZE_256: u32 = 256;
pub const IOWA_DATA_BLOCK_SIZE_512: u32 = 512;
pub const IOWA_DATA_BLOCK_SIZE_1024: u32 = 1024;
pub type wchar_t = ::std::os::raw::c_int;
pub type max_align_t = f64;
pub type int_least8_t = i8;
pub type int_least16_t = i16;
pub type int_least32_t = i32;
pub type int_least64_t = i64;
pub type uint_least8_t = u8;
pub type uint_least16_t = u16;
pub type uint_least32_t = u32;
pub type uint_least64_t = u64;
pub type int_fast8_t = i8;
pub type int_fast16_t = i16;
pub type int_fast32_t = i32;
pub type int_fast64_t = i64;
pub type uint_fast8_t = u8;
pub type uint_fast16_t = u16;
pub type uint_fast32_t = u32;
pub type uint_fast64_t = u64;
pub type __int8_t = ::std::os::raw::c_schar;
pub type __uint8_t = ::std::os::raw::c_uchar;
pub type __int16_t = ::std::os::raw::c_short;
pub type __uint16_t = ::std::os::raw::c_ushort;
pub type __int32_t = ::std::os::raw::c_int;
pub type __uint32_t = ::std::os::raw::c_uint;
pub type __int64_t = ::std::os::raw::c_longlong;
pub type __uint64_t = ::std::os::raw::c_ulonglong;
pub type __darwin_intptr_t = ::std::os::raw::c_long;
pub type __darwin_natural_t = ::std::os::raw::c_uint;
pub type __darwin_ct_rune_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Copy, Clone)]
pub union __mbstate_t {
    pub __mbstate8: [::std::os::raw::c_char; 128usize],
    pub _mbstateL: ::std::os::raw::c_longlong,
}
#[test]
fn bindgen_test_layout___mbstate_t() {
    const UNINIT: ::std::mem::MaybeUninit<__mbstate_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__mbstate_t>(),
        128usize,
        concat!("Size of: ", stringify!(__mbstate_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__mbstate_t>(),
        8usize,
        concat!("Alignment of ", stringify!(__mbstate_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__mbstate8) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__mbstate_t),
            "::",
            stringify!(__mbstate8)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._mbstateL) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__mbstate_t),
            "::",
            stringify!(_mbstateL)
        )
    );
}
pub type __darwin_mbstate_t = __mbstate_t;
pub type __darwin_ptrdiff_t = ::std::os::raw::c_long;
pub type __darwin_size_t = ::std::os::raw::c_ulong;
pub type __darwin_va_list = __builtin_va_list;
pub type __darwin_wchar_t = ::std::os::raw::c_int;
pub type __darwin_rune_t = __darwin_wchar_t;
pub type __darwin_wint_t = ::std::os::raw::c_int;
pub type __darwin_clock_t = ::std::os::raw::c_ulong;
pub type __darwin_socklen_t = __uint32_t;
pub type __darwin_ssize_t = ::std::os::raw::c_long;
pub type __darwin_time_t = ::std::os::raw::c_long;
pub type __darwin_blkcnt_t = __int64_t;
pub type __darwin_blksize_t = __int32_t;
pub type __darwin_dev_t = __int32_t;
pub type __darwin_fsblkcnt_t = ::std::os::raw::c_uint;
pub type __darwin_fsfilcnt_t = ::std::os::raw::c_uint;
pub type __darwin_gid_t = __uint32_t;
pub type __darwin_id_t = __uint32_t;
pub type __darwin_ino64_t = __uint64_t;
pub type __darwin_ino_t = __darwin_ino64_t;
pub type __darwin_mach_port_name_t = __darwin_natural_t;
pub type __darwin_mach_port_t = __darwin_mach_port_name_t;
pub type __darwin_mode_t = __uint16_t;
pub type __darwin_off_t = __int64_t;
pub type __darwin_pid_t = __int32_t;
pub type __darwin_sigset_t = __uint32_t;
pub type __darwin_suseconds_t = __int32_t;
pub type __darwin_uid_t = __uint32_t;
pub type __darwin_useconds_t = __uint32_t;
pub type __darwin_uuid_t = [::std::os::raw::c_uchar; 16usize];
pub type __darwin_uuid_string_t = [::std::os::raw::c_char; 37usize];
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_pthread_handler_rec {
    pub __routine: ::std::option::Option<unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void)>,
    pub __arg: *mut ::std::os::raw::c_void,
    pub __next: *mut __darwin_pthread_handler_rec,
}
#[test]
fn bindgen_test_layout___darwin_pthread_handler_rec() {
    const UNINIT: ::std::mem::MaybeUninit<__darwin_pthread_handler_rec> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__darwin_pthread_handler_rec>(),
        24usize,
        concat!("Size of: ", stringify!(__darwin_pthread_handler_rec))
    );
    assert_eq!(
        ::std::mem::align_of::<__darwin_pthread_handler_rec>(),
        8usize,
        concat!("Alignment of ", stringify!(__darwin_pthread_handler_rec))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__routine) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_pthread_handler_rec),
            "::",
            stringify!(__routine)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__arg) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_pthread_handler_rec),
            "::",
            stringify!(__arg)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__next) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_pthread_handler_rec),
            "::",
            stringify!(__next)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _opaque_pthread_attr_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 56usize],
}
#[test]
fn bindgen_test_layout__opaque_pthread_attr_t() {
    const UNINIT: ::std::mem::MaybeUninit<_opaque_pthread_attr_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_opaque_pthread_attr_t>(),
        64usize,
        concat!("Size of: ", stringify!(_opaque_pthread_attr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_opaque_pthread_attr_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_opaque_pthread_attr_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__sig) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_attr_t),
            "::",
            stringify!(__sig)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__opaque) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_attr_t),
            "::",
            stringify!(__opaque)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _opaque_pthread_cond_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 40usize],
}
#[test]
fn bindgen_test_layout__opaque_pthread_cond_t() {
    const UNINIT: ::std::mem::MaybeUninit<_opaque_pthread_cond_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_opaque_pthread_cond_t>(),
        48usize,
        concat!("Size of: ", stringify!(_opaque_pthread_cond_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_opaque_pthread_cond_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_opaque_pthread_cond_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__sig) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_cond_t),
            "::",
            stringify!(__sig)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__opaque) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_cond_t),
            "::",
            stringify!(__opaque)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _opaque_pthread_condattr_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 8usize],
}
#[test]
fn bindgen_test_layout__opaque_pthread_condattr_t() {
    const UNINIT: ::std::mem::MaybeUninit<_opaque_pthread_condattr_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_opaque_pthread_condattr_t>(),
        16usize,
        concat!("Size of: ", stringify!(_opaque_pthread_condattr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_opaque_pthread_condattr_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_opaque_pthread_condattr_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__sig) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_condattr_t),
            "::",
            stringify!(__sig)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__opaque) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_condattr_t),
            "::",
            stringify!(__opaque)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _opaque_pthread_mutex_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 56usize],
}
#[test]
fn bindgen_test_layout__opaque_pthread_mutex_t() {
    const UNINIT: ::std::mem::MaybeUninit<_opaque_pthread_mutex_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_opaque_pthread_mutex_t>(),
        64usize,
        concat!("Size of: ", stringify!(_opaque_pthread_mutex_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_opaque_pthread_mutex_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_opaque_pthread_mutex_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__sig) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_mutex_t),
            "::",
            stringify!(__sig)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__opaque) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_mutex_t),
            "::",
            stringify!(__opaque)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _opaque_pthread_mutexattr_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 8usize],
}
#[test]
fn bindgen_test_layout__opaque_pthread_mutexattr_t() {
    const UNINIT: ::std::mem::MaybeUninit<_opaque_pthread_mutexattr_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_opaque_pthread_mutexattr_t>(),
        16usize,
        concat!("Size of: ", stringify!(_opaque_pthread_mutexattr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_opaque_pthread_mutexattr_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_opaque_pthread_mutexattr_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__sig) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_mutexattr_t),
            "::",
            stringify!(__sig)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__opaque) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_mutexattr_t),
            "::",
            stringify!(__opaque)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _opaque_pthread_once_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 8usize],
}
#[test]
fn bindgen_test_layout__opaque_pthread_once_t() {
    const UNINIT: ::std::mem::MaybeUninit<_opaque_pthread_once_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_opaque_pthread_once_t>(),
        16usize,
        concat!("Size of: ", stringify!(_opaque_pthread_once_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_opaque_pthread_once_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_opaque_pthread_once_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__sig) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_once_t),
            "::",
            stringify!(__sig)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__opaque) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_once_t),
            "::",
            stringify!(__opaque)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _opaque_pthread_rwlock_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 192usize],
}
#[test]
fn bindgen_test_layout__opaque_pthread_rwlock_t() {
    const UNINIT: ::std::mem::MaybeUninit<_opaque_pthread_rwlock_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_opaque_pthread_rwlock_t>(),
        200usize,
        concat!("Size of: ", stringify!(_opaque_pthread_rwlock_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_opaque_pthread_rwlock_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_opaque_pthread_rwlock_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__sig) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_rwlock_t),
            "::",
            stringify!(__sig)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__opaque) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_rwlock_t),
            "::",
            stringify!(__opaque)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _opaque_pthread_rwlockattr_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 16usize],
}
#[test]
fn bindgen_test_layout__opaque_pthread_rwlockattr_t() {
    const UNINIT: ::std::mem::MaybeUninit<_opaque_pthread_rwlockattr_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_opaque_pthread_rwlockattr_t>(),
        24usize,
        concat!("Size of: ", stringify!(_opaque_pthread_rwlockattr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_opaque_pthread_rwlockattr_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_opaque_pthread_rwlockattr_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__sig) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_rwlockattr_t),
            "::",
            stringify!(__sig)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__opaque) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_rwlockattr_t),
            "::",
            stringify!(__opaque)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _opaque_pthread_t {
    pub __sig: ::std::os::raw::c_long,
    pub __cleanup_stack: *mut __darwin_pthread_handler_rec,
    pub __opaque: [::std::os::raw::c_char; 8176usize],
}
#[test]
fn bindgen_test_layout__opaque_pthread_t() {
    const UNINIT: ::std::mem::MaybeUninit<_opaque_pthread_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_opaque_pthread_t>(),
        8192usize,
        concat!("Size of: ", stringify!(_opaque_pthread_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_opaque_pthread_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_opaque_pthread_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__sig) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_t),
            "::",
            stringify!(__sig)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__cleanup_stack) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_t),
            "::",
            stringify!(__cleanup_stack)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__opaque) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_t),
            "::",
            stringify!(__opaque)
        )
    );
}
pub type __darwin_pthread_attr_t = _opaque_pthread_attr_t;
pub type __darwin_pthread_cond_t = _opaque_pthread_cond_t;
pub type __darwin_pthread_condattr_t = _opaque_pthread_condattr_t;
pub type __darwin_pthread_key_t = ::std::os::raw::c_ulong;
pub type __darwin_pthread_mutex_t = _opaque_pthread_mutex_t;
pub type __darwin_pthread_mutexattr_t = _opaque_pthread_mutexattr_t;
pub type __darwin_pthread_once_t = _opaque_pthread_once_t;
pub type __darwin_pthread_rwlock_t = _opaque_pthread_rwlock_t;
pub type __darwin_pthread_rwlockattr_t = _opaque_pthread_rwlockattr_t;
pub type __darwin_pthread_t = *mut _opaque_pthread_t;
pub type u_int8_t = ::std::os::raw::c_uchar;
pub type u_int16_t = ::std::os::raw::c_ushort;
pub type u_int32_t = ::std::os::raw::c_uint;
pub type u_int64_t = ::std::os::raw::c_ulonglong;
pub type register_t = i64;
pub type user_addr_t = u_int64_t;
pub type user_size_t = u_int64_t;
pub type user_ssize_t = i64;
pub type user_long_t = i64;
pub type user_ulong_t = u_int64_t;
pub type user_time_t = i64;
pub type user_off_t = i64;
pub type syscall_arg_t = u_int64_t;
pub type intmax_t = ::std::os::raw::c_long;
pub type uintmax_t = ::std::os::raw::c_ulong;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _iowa_context_t {
    _unused: [u8; 0],
}
#[doc = " Types"]
pub type iowa_context_t = *mut _iowa_context_t;
pub type iowa_dm_operation_t = u8;
pub type iowa_bootstrap_operation_t = u8;
pub type iowa_lwm2m_data_type_t = u8;
pub const iowa_lwm2m_protocol_version_t_IOWA_LWM2M_VERSION_UNDEFINED:
    iowa_lwm2m_protocol_version_t = 0;
pub const iowa_lwm2m_protocol_version_t_IOWA_LWM2M_VERSION_1_0: iowa_lwm2m_protocol_version_t = 1;
pub const iowa_lwm2m_protocol_version_t_IOWA_LWM2M_VERSION_1_1: iowa_lwm2m_protocol_version_t = 2;
pub type iowa_lwm2m_protocol_version_t = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct iowa_object_version_t {
    pub major: u8,
    pub minor: u8,
}
#[test]
fn bindgen_test_layout_iowa_object_version_t() {
    const UNINIT: ::std::mem::MaybeUninit<iowa_object_version_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<iowa_object_version_t>(),
        2usize,
        concat!("Size of: ", stringify!(iowa_object_version_t))
    );
    assert_eq!(
        ::std::mem::align_of::<iowa_object_version_t>(),
        1usize,
        concat!("Alignment of ", stringify!(iowa_object_version_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).major) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(iowa_object_version_t),
            "::",
            stringify!(major)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).minor) as usize - ptr as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(iowa_object_version_t),
            "::",
            stringify!(minor)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct iowa_lwm2m_object_link_t {
    pub objectId: u16,
    pub instanceId: u16,
    pub version: iowa_object_version_t,
}
#[test]
fn bindgen_test_layout_iowa_lwm2m_object_link_t() {
    const UNINIT: ::std::mem::MaybeUninit<iowa_lwm2m_object_link_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<iowa_lwm2m_object_link_t>(),
        6usize,
        concat!("Size of: ", stringify!(iowa_lwm2m_object_link_t))
    );
    assert_eq!(
        ::std::mem::align_of::<iowa_lwm2m_object_link_t>(),
        2usize,
        concat!("Alignment of ", stringify!(iowa_lwm2m_object_link_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).objectId) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(iowa_lwm2m_object_link_t),
            "::",
            stringify!(objectId)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).instanceId) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(iowa_lwm2m_object_link_t),
            "::",
            stringify!(instanceId)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).version) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(iowa_lwm2m_object_link_t),
            "::",
            stringify!(version)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct iowa_lwm2m_data_t {
    pub objectID: u16,
    pub instanceID: u16,
    pub resourceID: u16,
    pub resInstanceID: u16,
    pub type_: iowa_lwm2m_data_type_t,
    pub value: iowa_lwm2m_data_t__bindgen_ty_1,
    pub timestamp: i32,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union iowa_lwm2m_data_t__bindgen_ty_1 {
    pub asBoolean: bool,
    pub asInteger: i64,
    pub asFloat: f64,
    pub asBuffer: iowa_lwm2m_data_t__bindgen_ty_1__bindgen_ty_1,
    pub asBlock: iowa_lwm2m_data_t__bindgen_ty_1__bindgen_ty_2,
    pub asObjLink: iowa_lwm2m_object_link_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct iowa_lwm2m_data_t__bindgen_ty_1__bindgen_ty_1 {
    pub length: usize,
    pub buffer: *mut u8,
}
#[test]
fn bindgen_test_layout_iowa_lwm2m_data_t__bindgen_ty_1__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<iowa_lwm2m_data_t__bindgen_ty_1__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<iowa_lwm2m_data_t__bindgen_ty_1__bindgen_ty_1>(),
        16usize,
        concat!(
            "Size of: ",
            stringify!(iowa_lwm2m_data_t__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<iowa_lwm2m_data_t__bindgen_ty_1__bindgen_ty_1>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(iowa_lwm2m_data_t__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).length) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(iowa_lwm2m_data_t__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(length)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).buffer) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(iowa_lwm2m_data_t__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(buffer)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct iowa_lwm2m_data_t__bindgen_ty_1__bindgen_ty_2 {
    pub totalSize: usize,
    pub details: u32,
    pub buffer: *mut u8,
}
#[test]
fn bindgen_test_layout_iowa_lwm2m_data_t__bindgen_ty_1__bindgen_ty_2() {
    const UNINIT: ::std::mem::MaybeUninit<iowa_lwm2m_data_t__bindgen_ty_1__bindgen_ty_2> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<iowa_lwm2m_data_t__bindgen_ty_1__bindgen_ty_2>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(iowa_lwm2m_data_t__bindgen_ty_1__bindgen_ty_2)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<iowa_lwm2m_data_t__bindgen_ty_1__bindgen_ty_2>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(iowa_lwm2m_data_t__bindgen_ty_1__bindgen_ty_2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).totalSize) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(iowa_lwm2m_data_t__bindgen_ty_1__bindgen_ty_2),
            "::",
            stringify!(totalSize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).details) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(iowa_lwm2m_data_t__bindgen_ty_1__bindgen_ty_2),
            "::",
            stringify!(details)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).buffer) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(iowa_lwm2m_data_t__bindgen_ty_1__bindgen_ty_2),
            "::",
            stringify!(buffer)
        )
    );
}
#[test]
fn bindgen_test_layout_iowa_lwm2m_data_t__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<iowa_lwm2m_data_t__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<iowa_lwm2m_data_t__bindgen_ty_1>(),
        24usize,
        concat!("Size of: ", stringify!(iowa_lwm2m_data_t__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<iowa_lwm2m_data_t__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(iowa_lwm2m_data_t__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).asBoolean) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(iowa_lwm2m_data_t__bindgen_ty_1),
            "::",
            stringify!(asBoolean)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).asInteger) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(iowa_lwm2m_data_t__bindgen_ty_1),
            "::",
            stringify!(asInteger)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).asFloat) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(iowa_lwm2m_data_t__bindgen_ty_1),
            "::",
            stringify!(asFloat)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).asBuffer) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(iowa_lwm2m_data_t__bindgen_ty_1),
            "::",
            stringify!(asBuffer)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).asBlock) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(iowa_lwm2m_data_t__bindgen_ty_1),
            "::",
            stringify!(asBlock)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).asObjLink) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(iowa_lwm2m_data_t__bindgen_ty_1),
            "::",
            stringify!(asObjLink)
        )
    );
}
#[test]
fn bindgen_test_layout_iowa_lwm2m_data_t() {
    const UNINIT: ::std::mem::MaybeUninit<iowa_lwm2m_data_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<iowa_lwm2m_data_t>(),
        48usize,
        concat!("Size of: ", stringify!(iowa_lwm2m_data_t))
    );
    assert_eq!(
        ::std::mem::align_of::<iowa_lwm2m_data_t>(),
        8usize,
        concat!("Alignment of ", stringify!(iowa_lwm2m_data_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).objectID) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(iowa_lwm2m_data_t),
            "::",
            stringify!(objectID)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).instanceID) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(iowa_lwm2m_data_t),
            "::",
            stringify!(instanceID)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).resourceID) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(iowa_lwm2m_data_t),
            "::",
            stringify!(resourceID)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).resInstanceID) as usize - ptr as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(iowa_lwm2m_data_t),
            "::",
            stringify!(resInstanceID)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(iowa_lwm2m_data_t),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).value) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(iowa_lwm2m_data_t),
            "::",
            stringify!(value)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).timestamp) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(iowa_lwm2m_data_t),
            "::",
            stringify!(timestamp)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct iowa_lwm2m_uri_t {
    pub objectId: u16,
    pub instanceId: u16,
    pub resourceId: u16,
    pub resInstanceId: u16,
}
#[test]
fn bindgen_test_layout_iowa_lwm2m_uri_t() {
    const UNINIT: ::std::mem::MaybeUninit<iowa_lwm2m_uri_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<iowa_lwm2m_uri_t>(),
        8usize,
        concat!("Size of: ", stringify!(iowa_lwm2m_uri_t))
    );
    assert_eq!(
        ::std::mem::align_of::<iowa_lwm2m_uri_t>(),
        2usize,
        concat!("Alignment of ", stringify!(iowa_lwm2m_uri_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).objectId) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(iowa_lwm2m_uri_t),
            "::",
            stringify!(objectId)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).instanceId) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(iowa_lwm2m_uri_t),
            "::",
            stringify!(instanceId)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).resourceId) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(iowa_lwm2m_uri_t),
            "::",
            stringify!(resourceId)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).resInstanceId) as usize - ptr as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(iowa_lwm2m_uri_t),
            "::",
            stringify!(resInstanceId)
        )
    );
}
pub type iowa_status_t = u8;
pub const iowa_connection_type_t_IOWA_CONN_UNDEFINED: iowa_connection_type_t = 0;
pub const iowa_connection_type_t_IOWA_CONN_DATAGRAM: iowa_connection_type_t = 1;
pub const iowa_connection_type_t_IOWA_CONN_STREAM: iowa_connection_type_t = 2;
pub const iowa_connection_type_t_IOWA_CONN_LORAWAN: iowa_connection_type_t = 3;
pub const iowa_connection_type_t_IOWA_CONN_SMS: iowa_connection_type_t = 4;
pub const iowa_connection_type_t_IOWA_CONN_WEBSOCKET: iowa_connection_type_t = 5;
pub type iowa_connection_type_t = ::std::os::raw::c_uint;
pub type iowa_content_format_t = u16;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct iowa_response_content_t {
    pub details: iowa_response_content_t__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union iowa_response_content_t__bindgen_ty_1 {
    pub read: iowa_response_content_t__bindgen_ty_1__bindgen_ty_1,
    pub observe: iowa_response_content_t__bindgen_ty_1__bindgen_ty_2,
    pub dataPush: iowa_response_content_t__bindgen_ty_1__bindgen_ty_3,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct iowa_response_content_t__bindgen_ty_1__bindgen_ty_1 {
    pub dataCount: usize,
    pub dataP: *mut iowa_lwm2m_data_t,
}
#[test]
fn bindgen_test_layout_iowa_response_content_t__bindgen_ty_1__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<iowa_response_content_t__bindgen_ty_1__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<iowa_response_content_t__bindgen_ty_1__bindgen_ty_1>(),
        16usize,
        concat!(
            "Size of: ",
            stringify!(iowa_response_content_t__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<iowa_response_content_t__bindgen_ty_1__bindgen_ty_1>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(iowa_response_content_t__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dataCount) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(iowa_response_content_t__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(dataCount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dataP) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(iowa_response_content_t__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(dataP)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct iowa_response_content_t__bindgen_ty_1__bindgen_ty_2 {
    pub notificationNumber: u32,
    pub dataCount: usize,
    pub dataP: *mut iowa_lwm2m_data_t,
}
#[test]
fn bindgen_test_layout_iowa_response_content_t__bindgen_ty_1__bindgen_ty_2() {
    const UNINIT: ::std::mem::MaybeUninit<iowa_response_content_t__bindgen_ty_1__bindgen_ty_2> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<iowa_response_content_t__bindgen_ty_1__bindgen_ty_2>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(iowa_response_content_t__bindgen_ty_1__bindgen_ty_2)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<iowa_response_content_t__bindgen_ty_1__bindgen_ty_2>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(iowa_response_content_t__bindgen_ty_1__bindgen_ty_2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).notificationNumber) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(iowa_response_content_t__bindgen_ty_1__bindgen_ty_2),
            "::",
            stringify!(notificationNumber)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dataCount) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(iowa_response_content_t__bindgen_ty_1__bindgen_ty_2),
            "::",
            stringify!(dataCount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dataP) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(iowa_response_content_t__bindgen_ty_1__bindgen_ty_2),
            "::",
            stringify!(dataP)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct iowa_response_content_t__bindgen_ty_1__bindgen_ty_3 {
    pub dataCount: usize,
    pub dataP: *mut iowa_lwm2m_data_t,
}
#[test]
fn bindgen_test_layout_iowa_response_content_t__bindgen_ty_1__bindgen_ty_3() {
    const UNINIT: ::std::mem::MaybeUninit<iowa_response_content_t__bindgen_ty_1__bindgen_ty_3> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<iowa_response_content_t__bindgen_ty_1__bindgen_ty_3>(),
        16usize,
        concat!(
            "Size of: ",
            stringify!(iowa_response_content_t__bindgen_ty_1__bindgen_ty_3)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<iowa_response_content_t__bindgen_ty_1__bindgen_ty_3>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(iowa_response_content_t__bindgen_ty_1__bindgen_ty_3)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dataCount) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(iowa_response_content_t__bindgen_ty_1__bindgen_ty_3),
            "::",
            stringify!(dataCount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dataP) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(iowa_response_content_t__bindgen_ty_1__bindgen_ty_3),
            "::",
            stringify!(dataP)
        )
    );
}
#[test]
fn bindgen_test_layout_iowa_response_content_t__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<iowa_response_content_t__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<iowa_response_content_t__bindgen_ty_1>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(iowa_response_content_t__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<iowa_response_content_t__bindgen_ty_1>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(iowa_response_content_t__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).read) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(iowa_response_content_t__bindgen_ty_1),
            "::",
            stringify!(read)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).observe) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(iowa_response_content_t__bindgen_ty_1),
            "::",
            stringify!(observe)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dataPush) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(iowa_response_content_t__bindgen_ty_1),
            "::",
            stringify!(dataPush)
        )
    );
}
#[test]
fn bindgen_test_layout_iowa_response_content_t() {
    const UNINIT: ::std::mem::MaybeUninit<iowa_response_content_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<iowa_response_content_t>(),
        24usize,
        concat!("Size of: ", stringify!(iowa_response_content_t))
    );
    assert_eq!(
        ::std::mem::align_of::<iowa_response_content_t>(),
        8usize,
        concat!("Alignment of ", stringify!(iowa_response_content_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).details) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(iowa_response_content_t),
            "::",
            stringify!(details)
        )
    );
}
#[doc = " Callback use to get response to handle operation"]
pub type iowa_response_callback_t = ::std::option::Option<
    unsafe extern "C" fn(
        sourceId: u32,
        operation: u8,
        status: iowa_status_t,
        contentP: *mut iowa_response_content_t,
        userDataP: *mut ::std::os::raw::c_void,
        contextP: iowa_context_t,
    ),
>;
#[doc = " Callback use to save external data with the IOWA context"]
pub type iowa_load_callback_t = ::std::option::Option<
    unsafe extern "C" fn(
        callbackId: u16,
        buffer: *mut u8,
        bufferLength: usize,
        userDataP: *mut ::std::os::raw::c_void,
    ),
>;
pub type iowa_save_callback_t = ::std::option::Option<
    unsafe extern "C" fn(
        callbackId: u16,
        buffer: *mut u8,
        bufferLength: usize,
        userDataP: *mut ::std::os::raw::c_void,
    ) -> usize,
>;
extern "C" {
    #[doc = " Common APIs"]
    pub fn iowa_init(userData: *mut ::std::os::raw::c_void) -> iowa_context_t;
}
extern "C" {
    pub fn iowa_close(contextP: iowa_context_t);
}
extern "C" {
    pub fn iowa_step(contextP: iowa_context_t, timeout: i32) -> iowa_status_t;
}
extern "C" {
    pub fn iowa_stop(contextP: iowa_context_t);
}
extern "C" {
    pub fn iowa_flush_before_pause(
        contextP: iowa_context_t,
        duration: i32,
        delayP: *mut u32,
    ) -> iowa_status_t;
}
extern "C" {
    pub fn iowa_clock_reset(contextP: iowa_context_t) -> iowa_status_t;
}
extern "C" {
    pub fn iowa_save_context(contextP: iowa_context_t) -> iowa_status_t;
}
extern "C" {
    pub fn iowa_save_context_snapshot(contextP: iowa_context_t) -> iowa_status_t;
}
extern "C" {
    pub fn iowa_load_context(contextP: iowa_context_t) -> iowa_status_t;
}
extern "C" {
    pub fn iowa_backup_register_callback(
        contextP: iowa_context_t,
        callbackId: u16,
        saveCallback: iowa_save_callback_t,
        loadCallback: iowa_load_callback_t,
        userDataP: *mut ::std::os::raw::c_void,
    ) -> iowa_status_t;
}
extern "C" {
    pub fn iowa_backup_deregister_callback(contextP: iowa_context_t, callbackId: u16);
}
extern "C" {
    pub fn iowa_connection_closed(contextP: iowa_context_t, connP: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn iowa_data_get_block_info(
        dataP: *mut iowa_lwm2m_data_t,
        numberP: *mut u32,
        moreP: *mut bool,
        sizeP: *mut u16,
    ) -> iowa_status_t;
}
extern "C" {
    pub fn iowa_data_set_block_info(
        dataP: *mut iowa_lwm2m_data_t,
        number: u32,
        more: bool,
        size: u16,
    ) -> iowa_status_t;
}
pub type __builtin_va_list = *mut ::std::os::raw::c_char;
